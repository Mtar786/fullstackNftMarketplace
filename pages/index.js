import { useEffect, useState } from 'react';
import { ethers } from 'ethers';
import axios from 'axios';
import Web3Modal from 'web3modal';
import NFTCard from '../components/NFTCard';
import { nftaddress, nftmarketaddress } from '../constants/addresses';

// These imports refer to the compiled contract artifacts generated by Hardhat after running `npm run compile`.
// If you change the contract names or move them, update these import paths accordingly.
import NFT from '../artifacts/contracts/NFT.sol/NFT.json';
import Marketplace from '../artifacts/contracts/NFTMarketplace.sol/NFTMarketplace.json';

export default function Home() {
  const [nfts, setNfts] = useState([]);
  const [loadingState, setLoadingState] = useState('not-loaded');

  useEffect(() => {
    loadNFTs();
  }, []);

  async function loadNFTs() {
    // Connect to the default RPC provider (public network) to read market data
    const provider = new ethers.providers.JsonRpcProvider();
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider);
    const marketContract = new ethers.Contract(nftmarketaddress, Marketplace.abi, provider);
    try {
      const data = await marketContract.fetchMarketItems();
      const items = await Promise.all(
        data.map(async i => {
          const tokenUri = await tokenContract.tokenURI(i.tokenId);
          // Fetch metadata from the token URI (IPFS or HTTP).  The metadata should
          // contain at least { name, description, image }.
          const meta = await axios.get(tokenUri);
          const price = ethers.utils.formatUnits(i.price.toString(), 'ether');
          const item = {
            price,
            itemId: i.itemId.toNumber(),
            tokenId: i.tokenId.toNumber(),
            seller: i.seller,
            owner: i.owner,
            image: meta.data.image,
            name: meta.data.name,
            description: meta.data.description,
          };
          return item;
        })
      );
      setNfts(items);
      setLoadingState('loaded');
    } catch (err) {
      console.error('Failed to load NFTs', err);
    }
  }

  async function buyNft(nft) {
    // Prompt the user to connect their wallet
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();
    const contract = new ethers.Contract(nftmarketaddress, Marketplace.abi, signer);
    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether');
    const transaction = await contract.createMarketSale(nftaddress, nft.itemId, {
      value: price,
    });
    await transaction.wait();
    loadNFTs();
  }

  if (loadingState === 'loaded' && !nfts.length)
    return (
      <h1 className="px-20 py-10 text-3xl">No items in marketplace</h1>
    );

  return (
    <div className="flex justify-center">
      <div className="px-4" style={{ maxWidth: '1200px' }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
          {nfts.map((nft, i) => (
            <NFTCard key={i} nft={nft} onPurchase={() => buyNft(nft)} />
          ))}
        </div>
      </div>
    </div>
  );
}